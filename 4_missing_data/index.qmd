
## Load data and packages

```{r}
pacman::p_load(
  rio,           # import/export
  tidyverse,     # data mgmt and viz
  naniar,        # assess and visualize missingness
  mice           # missing data imputation
)
```

```{r}
# import the linelist
linelist <- import("linelist_cleaned.rds")
```


## R Missing Values

- Missing values in R is represented as `NA`
- Some data missing is represented as blank, 99 or unknown.

```{r}
linelist <- linelist |> 
  
  # Create new "age_years" column from "age" column
  mutate(age_years = case_when(
    age_unit == "years"  ~ age,       # if age is given in years, assign original value
    age_unit == "months" ~ age/12,    # if age is given in months, divide by 12
    is.na(age_unit)      ~ age,       # if age UNIT is missing, assume years
    TRUE                 ~ NA_real_)) # any other circumstance, assign missing

# NA_character_ for characters
# NA_real_ for numeric
# NA for logical
```

- `NULL` used in functions or expressions, and is returned when a logical representation of a statement that is neither true nor false.

- `NaN` used to represent impossible values like `0/0`

- `Inf` used to represent infinite values like `5/0`

```{r}
# NA can be introduced by coercion

as.numeric(c("10", "20", "thirty", "40"))
```

```{r}
# in vectors NULL is ignored
my_vector <- c(25, NA, 10, NULL)  # define
my_vector                         # print
```
```{r}
var(22)
```


## Functions for handling missing values

```{r}
my_vector <- c(1, 4, 56, NA, 5, NA, 22)
is.na(my_vector)
```

```{r}
!is.na(my_vector)
```

```{r}
# check for number of missing values
sum(is.na(my_vector))
```

```{r}
# removes any missing values 
na.omit(my_vector)
```

```{r}
# removes rows with missing values
linelist |> 
  drop_na(case_id, date_onset, age) # drops rows missing values for any of these columns
```

```{r}
my_vector <- c(1, 4, 56, NA, 5, NA, 22)

mean(my_vector)     

mean(my_vector, na.rm = TRUE)
```


## How to check for missing values

```{r}
# use naniar to assess and visualize missingness in the data
# install and/or load package
pacman::p_load(naniar)
```

```{r}
# percent of ALL data frame values that are missing
pct_miss(linelist)
```
```{r}
# note that NA is considered as missing, and not "" or " "
# Percent of rows with any value missing
pct_miss_case(linelist)   # use n_complete() for counts
```

```{r}
# Percent of rows that are complete (no values missing)  
pct_complete_case(linelist) # use n_complete() for counts
```

```{r}
# visualize missingness
gg_miss_var(linelist, show_pct = TRUE)
```

```{r}
# split the data by groups e.g outcome
linelist |> 
  gg_miss_var(show_pct = TRUE, facet = outcome)
```
```{r}
# visualize as heatmap
# Heatplot of missingness across the entire data frame  
vis_miss(linelist)
```

```{r}
# visualize missingness relationship
ggplot(
  data = linelist,
  mapping = aes(x = age_years, y = temp)) +     
  geom_miss_point()
```
```{r}
# assess missingness stratified by another column
gg_miss_fct(linelist, age_cat5)
```

```{r}
# view how missing ness has changed over time
gg_miss_fct(linelist, date_onset)
```
```{r}
# naniar allows visualizing missingness in one column by values in a second column using "shadow", by creating a binary NA/not NA column for each column, and binds these new columns to the original dataset.
shadowed_linelist <- linelist |> 
  bind_shadow()

names(shadowed_linelist)
```

```{r}
# proportion of records missing, number of days from symptom onset to hospitalization
ggplot(data = shadowed_linelist,          # data frame with shadow columns
  mapping = aes(x = date_hospitalisation, # numeric or date column
                colour = age_years_NA)) + # shadow column of interest
  geom_density()                          # plots the density curves
```

```{r}
# stratify a stiatistcal summary
linelist |>
  bind_shadow() |>                # create the shows cols
  group_by(date_outcome_NA) |>    # shadow col for stratifying
  summarise(across(
    .cols = age_years,             # variable of interest for calculations
    .fns = list("mean" = mean,     # stats to calculate
                "sd" = sd,
                "var" = var,
                "min" = min,
                "max" = max),  
    na.rm = TRUE))                 # other arguments for the stat calculations
```
```{r}
# group data by week
outcome_missing <- linelist |>
  mutate(week = lubridate::floor_date(date_onset, "week")) |>   # create new week column
  group_by(week) |>                                             # group the rows by week
  summarise(                                                     # summarize each week
    n_obs = n(),                                                  # number of records
    
    outcome_missing = sum(is.na(outcome) | outcome == ""),        # number of records missing the value
    outcome_p_miss  = outcome_missing / n_obs,                    # proportion of records missing the value
  
    outcome_dead    = sum(outcome == "Death", na.rm=T),           # number of records as dead
    outcome_p_dead  = outcome_dead / n_obs) |>                   # proportion of records as dead
  
  tidyr::pivot_longer(-week, names_to = "statistic") |>         # pivot all columns except week, to long format for ggplot
  filter(stringr::str_detect(statistic, "_p_"))                  # keep only the proportion values


# visualize
ggplot(data = outcome_missing)+
    geom_line(
      mapping = aes(x = week, y = value, group = statistic, color = statistic),
      size = 2,
      stat = "identity")+
    labs(title = "Weekly outcomes",
         x = "Week",
         y = "Proportion of weekly records") + 
     scale_color_discrete(
       name = "",
       labels = c("Died", "Missing outcome"))+
    scale_y_continuous(breaks = c(seq(0,1,0.1)))+
  theme_minimal()+
  theme(legend.position = "bottom")
```


## Using data with missing values

```{r}
# remove rows with missing values
linelist |> 
  drop_na() |>     # remove rows with ANY missing values
  nrow()
```
```{r}
linelist |> 
  drop_na(date_onset) |> # remove rows missing date_onset 
  nrow()
```

```{r}
linelist |> 
  drop_na(contains("date")) |> # remove rows missing values in any "date" column 
  nrow()
```

```{r}
# reporting missing in caption 
# labs(
#   title = "",
#   y = "",
#   x = "",
#   caption  = stringr::str_glue(
#   "n = {nrow(central_data)} from Central Hospital;
#   {nrow(central_data |> filter(is.na(date_onset)))} cases missing date of onset and not shown."))  
```

```{r}
# using NA in factors
pacman::p_load(forcats)   # load package

linelist <- linelist |> 
  mutate(gender = fct_explicit_na(gender, na_level = "Missing"))

levels(linelist$gender)
```

## Missing Data Imputation

### Types of missing data

- MCAR
- MAR
- MNAR

```{r}
# use mice
pacman::p_load(mice)
```


```{r}
# mean imputation
linelist <- linelist |>
  mutate(temp_replace_na_with_mean = replace_na(temp, mean(temp, na.rm = T)))
```


```{r}
# replace with a particular categorical value
linelist <- linelist |>
  mutate(outcome_replace_na_with_death = replace_na(outcome, "Death"))
```

```{r}
simple_temperature_model_fit <- lm(temp ~ fever + age_years, data = linelist)

#using our simple temperature model to predict values just for the observations where temp is missing
predictions_for_missing_temps <- predict(simple_temperature_model_fit,
                                        newdata = linelist |> filter(is.na(temp))) 
```


```{r}
# using mice package
model_dataset <- linelist |>
  select(temp, fever, age_years)  

temp_imputed <- mice(model_dataset,
                            method = "norm.predict",
                            seed = 1,
                            m = 1,
                            print = F)
```

## LOCF and BOCF

Imputation methods for time series/longitudinal data.

Takes previous observed value as a replacement for the missing data.

When multiple values are missing in succession, the method searchers for the last observed value. 
```{r}
#creating our simple dataset
disease <- tibble::tribble(
  ~quarter, ~year, ~cases,
  "Q1",    2000,    66013,
  "Q2",      NA,    69182,
  "Q3",      NA,    53175,
  "Q4",      NA,    21001,
  "Q1",    2001,    46036,
  "Q2",      NA,    58842,
  "Q3",      NA,    44568,
  "Q4",      NA,    50197)

#imputing the missing year values:
disease |> fill(year)

# ensure data is sorted correctly before using
```

```{r}
#creating our slightly different dataset
disease <- tibble::tribble(
  ~quarter, ~year, ~cases,
  "Q1",      NA,    66013,
  "Q2",      NA,    69182,
  "Q3",      NA,    53175,
  "Q4",    2000,    21001,
  "Q1",      NA,    46036,
  "Q2",      NA,    58842,
  "Q3",      NA,    44568,
  "Q4",    2001,    50197)

#imputing the missing year values in the "up" direction:
disease |> fill(year, .direction = "up")
```



```{r}
# imputing missing values for all variables in our model_dataset, and creating 10 new imputed datasets
multiple_imputation = mice(
  model_dataset,
  seed = 1,
  m = 10,
  print = FALSE) 
```


```{r}
model_fit <- with(multiple_imputation, lm(temp ~ age_years + fever))

base::summary(mice::pool(model_fit))
```





